{"compilerOptions":{"css":"external","dev":true,"hydratable":true},"configFile":false,"extensions":[".svelte"],"preprocess":[{"script":"async script({ attributes, content, filename = \"\" }) {\r\n      const lang = attributes.lang;\r\n      if (!supportedScriptLangs.includes(lang))\r\n        return;\r\n      const transformResult = await transformWithEsbuild(content, filename, {\r\n        loader: lang,\r\n        target: \"esnext\",\r\n        tsconfigRaw: {\r\n          compilerOptions: {\r\n            importsNotUsedAsValues: \"preserve\",\r\n            preserveValueImports: true\r\n          }\r\n        }\r\n      });\r\n      return {\r\n        code: transformResult.code,\r\n        map: transformResult.map\r\n      };\r\n    }","style":"async ({ attributes, content, filename = \"\" }) => {\r\n    const lang = attributes.lang;\r\n    if (!supportedStyleLangs.includes(lang))\r\n      return;\r\n    if (!transform) {\r\n      let resolvedConfig;\r\n      if (style.__resolvedConfig) {\r\n        resolvedConfig = style.__resolvedConfig;\r\n      } else if (isResolvedConfig(config)) {\r\n        resolvedConfig = config;\r\n      } else {\r\n        resolvedConfig = await resolveConfig(\r\n          config,\r\n          process.env.NODE_ENV === \"production\" ? \"build\" : \"serve\"\r\n        );\r\n      }\r\n      transform = getCssTransformFn(resolvedConfig);\r\n    }\r\n    const moduleId = `${filename}.${lang}`;\r\n    const result = await transform(content, moduleId);\r\n    if (result.map?.sources?.[0] === moduleId) {\r\n      result.map.sources[0] = path10.basename(filename);\r\n    }\r\n    return {\r\n      code: result.code,\r\n      map: result.map ?? void 0\r\n    };\r\n  }"},{"script":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tif (basename.startsWith('+page.') || basename.startsWith('+layout.')) {\r\n\t\t\tconst match = content.match(options_regex);\r\n\t\t\tif (match) {\r\n\t\t\t\tconst fixed = basename.replace('.svelte', '(.server).js/ts');\r\n\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t\t`\\`${match[1]}\\` will be ignored — move it to ${fixed} instead. See https://kit.svelte.dev/docs/page-options for more information.`;\r\n\r\n\t\t\t\tif (!warned.has(message)) {\r\n\t\t\t\t\tconsole.log(message);\r\n\t\t\t\t\twarned.add(message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","markup":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tif (basename.startsWith('+layout.') && !content.includes('<slot')) {\r\n\t\t\tconst message =\r\n\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t`\\`<slot />\\` missing — inner content will not be rendered`;\r\n\r\n\t\t\tif (!warned.has(message)) {\r\n\t\t\t\tconsole.log(message);\r\n\t\t\t\twarned.add(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}"}]}
