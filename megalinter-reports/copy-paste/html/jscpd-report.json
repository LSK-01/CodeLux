{
  "statistics": {
    "detectionDate": "2023-03-10T14:27:57.840Z",
    "formats": {
      "typescript": {
        "sources": {
          ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts": {
            "lines": 235,
            "tokens": 2606,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 356,
            "duplicatedTokens": 4083,
            "percentage": 151.49,
            "percentageTokens": 156.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts": {
            "lines": 21,
            "tokens": 662,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 130,
            "duplicatedTokens": 4615,
            "percentage": 619.05,
            "percentageTokens": 697.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/project_overview/updateScore/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/project_overview/toggleProgress/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/surveys/proxy+page.server.ts": {
            "lines": 100,
            "tokens": 996,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 109,
            "duplicatedTokens": 1111,
            "percentage": 109,
            "percentageTokens": 111.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/surveys/$types.d.ts": {
            "lines": 21,
            "tokens": 675,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 12,
            "duplicatedTokens": 488,
            "percentage": 57.14,
            "percentageTokens": 72.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/surveycomplete/$types.d.ts": {
            "lines": 14,
            "tokens": 411,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 295,
            "percentage": 50,
            "percentageTokens": 71.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/signup/proxy+page.server.ts": {
            "lines": 38,
            "tokens": 407,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 295,
            "percentage": 78.95,
            "percentageTokens": 72.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/signup/$types.d.ts": {
            "lines": 21,
            "tokens": 675,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 598,
            "percentage": 80.95,
            "percentageTokens": 88.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/project_overview/proxy+page.server.ts": {
            "lines": 119,
            "tokens": 1115,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 118,
            "duplicatedTokens": 1102,
            "percentage": 99.16,
            "percentageTokens": 98.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/project_overview/$types.d.ts": {
            "lines": 21,
            "tokens": 657,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 580,
            "percentage": 80.95,
            "percentageTokens": 88.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/login/proxy+page.server.ts": {
            "lines": 48,
            "tokens": 526,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 504,
            "percentage": 97.92,
            "percentageTokens": 95.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/login/$types.d.ts": {
            "lines": 21,
            "tokens": 675,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 598,
            "percentage": 80.95,
            "percentageTokens": 88.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/githubAPI/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts": {
            "lines": 230,
            "tokens": 2244,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 261,
            "duplicatedTokens": 2583,
            "percentage": 113.48,
            "percentageTokens": 115.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/dashboard/$types.d.ts": {
            "lines": 21,
            "tokens": 657,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 580,
            "percentage": 80.95,
            "percentageTokens": 88.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/codeAnalysis/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/api/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/addProj/$types.d.ts": {
            "lines": 7,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/add/proxy+page.server.ts": {
            "lines": 16,
            "tokens": 174,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 114,
            "percentage": 75,
            "percentageTokens": 65.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/add/$types.d.ts": {
            "lines": 21,
            "tokens": 675,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 598,
            "percentage": 80.95,
            "percentageTokens": 88.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/about/$types.d.ts": {
            "lines": 14,
            "tokens": 411,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 334,
            "percentage": 71.43,
            "percentageTokens": 81.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/projects/[slug]/+page.server.ts": {
            "lines": 234,
            "tokens": 2598,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 234,
            "duplicatedTokens": 2583,
            "percentage": 100,
            "percentageTokens": 99.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/project_overview/updateScore/+server.ts": {
            "lines": 16,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/project_overview/toggleProgress/+server.ts": {
            "lines": 35,
            "tokens": 353,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/proxy+page.server.ts": {
            "lines": 5,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/proxy+layout.server.ts": {
            "lines": 14,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/types/src/routes/$types.d.ts": {
            "lines": 29,
            "tokens": 865,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 544,
            "percentage": 55.17,
            "percentageTokens": 62.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/surveys/+page.server.ts": {
            "lines": 99,
            "tokens": 988,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 99,
            "duplicatedTokens": 973,
            "percentage": 100,
            "percentageTokens": 98.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/signup/+page.server.ts": {
            "lines": 37,
            "tokens": 399,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 295,
            "percentage": 81.08,
            "percentageTokens": 73.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/project_overview/+page.server.ts": {
            "lines": 118,
            "tokens": 1107,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 118,
            "duplicatedTokens": 1096,
            "percentage": 100,
            "percentageTokens": 99.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/login/+page.server.ts": {
            "lines": 47,
            "tokens": 518,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 504,
            "percentage": 100,
            "percentageTokens": 97.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/githubAPI/+server.ts": {
            "lines": 121,
            "tokens": 1067,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/dashboard/+page.server.ts": {
            "lines": 229,
            "tokens": 2236,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 235,
            "duplicatedTokens": 2309,
            "percentage": 102.62,
            "percentageTokens": 103.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/codeAnalysis/+server.ts": {
            "lines": 43,
            "tokens": 476,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/api/+server.ts": {
            "lines": 52,
            "tokens": 454,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/addProj/+server.ts": {
            "lines": 26,
            "tokens": 333,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/add/project.ts": {
            "lines": 15,
            "tokens": 110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/add/+page.server.ts": {
            "lines": 15,
            "tokens": 166,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 114,
            "percentage": 80,
            "percentageTokens": 68.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/+page.server.ts": {
            "lines": 4,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/+layout.server.ts": {
            "lines": 13,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/user.ts": {
            "lines": 5,
            "tokens": 44,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/hooks.server.ts": {
            "lines": 18,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/app.d.ts": {
            "lines": 11,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/ambient.d.ts": {
            "lines": 175,
            "tokens": 1035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "vite.config.ts": {
            "lines": 7,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 2371,
          "tokens": 27752,
          "sources": 46,
          "clones": 32,
          "duplicatedLines": 984,
          "duplicatedTokens": 13448,
          "percentage": 41.5,
          "percentageTokens": 48.46,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "latex": {
        "sources": {
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/report.tex": {
            "lines": 28,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 28,
          "tokens": 1071,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "haskell": {
        "sources": {
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/Spec.hs": {
            "lines": 8,
            "tokens": 18,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/Row.hs": {
            "lines": 108,
            "tokens": 1247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/Piece.hs": {
            "lines": 89,
            "tokens": 1081,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/Main.hs": {
            "lines": 142,
            "tokens": 1623,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/routes/githubAPI/projectCode/Eg22ifgHWzTapsFd9lZJ/Dimensions.hs": {
            "lines": 49,
            "tokens": 363,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 396,
          "tokens": 4332,
          "sources": 5,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          ".svelte-kit/generated/server/internal.js": {
            "lines": 25,
            "tokens": 296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          ".svelte-kit/generated/client/app.js": {
            "lines": 34,
            "tokens": 350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/stubs/stores.js": {
            "lines": 2,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/projectListBox.test.js": {
            "lines": 51,
            "tokens": 671,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/projectBox.test.js": {
            "lines": 49,
            "tokens": 608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Tile.test.js": {
            "lines": 41,
            "tokens": 227,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/TasksBox.test.js": {
            "lines": 8,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/SurveysBox.test.js": {
            "lines": 70,
            "tokens": 709,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Radio.test.js": {
            "lines": 8,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/OverviewsBox.test.js": {
            "lines": 104,
            "tokens": 636,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 52,
            "duplicatedTokens": 454,
            "percentage": 50,
            "percentageTokens": 71.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Input.test.js": {
            "lines": 38,
            "tokens": 477,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Header.test.js": {
            "lines": 48,
            "tokens": 413,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Form.test.js": {
            "lines": 8,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/FeedbackForm.test.js": {
            "lines": 118,
            "tokens": 1158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/DeadlinesBox.test.js": {
            "lines": 65,
            "tokens": 486,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 84,
            "percentage": 18.46,
            "percentageTokens": 17.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest/Button.test.js": {
            "lines": 52,
            "tokens": 352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tailwind.config.cjs": {
            "lines": 7,
            "tokens": 48,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "svelte.config.js": {
            "lines": 14,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest.config.mjs": {
            "lines": 212,
            "tokens": 623,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jest-setup.js": {
            "lines": 14,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 968,
          "tokens": 7536,
          "sources": 20,
          "clones": 3,
          "duplicatedLines": 32,
          "duplicatedTokens": 269,
          "percentage": 3.31,
          "percentageTokens": 3.57,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "src/routes/styles.css": {
            "lines": 141,
            "tokens": 859,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/output.css": {
            "lines": 705,
            "tokens": 2822,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 94,
            "duplicatedTokens": 626,
            "percentage": 13.33,
            "percentageTokens": 22.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 846,
          "tokens": 3681,
          "sources": 2,
          "clones": 1,
          "duplicatedLines": 47,
          "duplicatedTokens": 313,
          "percentage": 5.56,
          "percentageTokens": 8.5,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 4609,
      "tokens": 44372,
      "sources": 74,
      "clones": 36,
      "duplicatedLines": 1063,
      "duplicatedTokens": 14030,
      "percentage": 23.06,
      "percentageTokens": 31.62,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ".forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 91,
        "end": 97,
        "startLoc": {
          "line": 91,
          "column": 15,
          "position": 978
        },
        "endLoc": {
          "line": 97,
          "column": 6,
          "position": 1068
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 15,
          "position": 862
        },
        "endLoc": {
          "line": 88,
          "column": 5,
          "position": 952
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ".forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n    });\n    const querySnapshot4",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 100,
        "end": 108,
        "startLoc": {
          "line": 100,
          "column": 15,
          "position": 1094
        },
        "endLoc": {
          "line": 108,
          "column": 15,
          "position": 1196
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 82,
        "end": 90,
        "startLoc": {
          "line": 82,
          "column": 15,
          "position": 862
        },
        "endLoc": {
          "line": 90,
          "column": 15,
          "position": 964
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ".forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false})\n    });\n    returnArray",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 109,
        "end": 117,
        "startLoc": {
          "line": 109,
          "column": 15,
          "position": 1210
        },
        "endLoc": {
          "line": 117,
          "column": 12,
          "position": 1310
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 82,
        "end": 99,
        "startLoc": {
          "line": 82,
          "column": 15,
          "position": 862
        },
        "endLoc": {
          "line": 99,
          "column": 6,
          "position": 1078
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "];\n    let projects : any[] = [];\n\n    const db = getFirestore(app);\n    const projectsRef = collection(db, 'projects');\n    const q1 = query(projectsRef, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",false), where",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 122,
        "end": 127,
        "startLoc": {
          "line": 122,
          "column": 19,
          "position": 1355
        },
        "endLoc": {
          "line": 127,
          "column": 6,
          "position": 1441
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 72,
        "end": 77,
        "startLoc": {
          "line": 72,
          "column": 15,
          "position": 614
        },
        "endLoc": {
          "line": 77,
          "column": 8,
          "position": 701
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ",\"==\",true), orderBy(\"deadline\",\"asc\"));\n    const querySnapshot1 = await getDocs(q1);\n    querySnapshot1.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n    });\n    const querySnapshot2 = await getDocs(q2);\n    querySnapshot2.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false})\n    });\n    returnArray.push(projects);\n    return returnArray ;\n}\n\nasync function getProjectsWithSurveysDue",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 128,
        "end": 151,
        "startLoc": {
          "line": 128,
          "column": 9,
          "position": 1499
        },
        "endLoc": {
          "line": 151,
          "column": 26,
          "position": 1770
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 80,
        "end": 121,
        "startLoc": {
          "line": 80,
          "column": 11,
          "position": 829
        },
        "endLoc": {
          "line": 121,
          "column": 18,
          "position": 1331
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ".empty) {\n          projects.push({\n              id: project.id,\n              projectName: project.data().projectname, \n              dueDate: project.data().deadline.toDate().toLocaleString(\"en-GB\",{\n              year: \"numeric\",\n              month: \"numeric\",\n              day: \"numeric\",\n              }), managerBool: true})\n          };\n      });\n    returnArray",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 206,
        "end": 217,
        "startLoc": {
          "line": 206,
          "column": 15,
          "position": 2319
        },
        "endLoc": {
          "line": 217,
          "column": 12,
          "position": 2420
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 183,
        "end": 195,
        "startLoc": {
          "line": 183,
          "column": 15,
          "position": 2105
        },
        "endLoc": {
          "line": 195,
          "column": 6,
          "position": 2207
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ".forEach((doc) => {\n                // doc.data() is never undefined for query doc snapshots\n                questions.push({ question: doc.data().question, metric: doc.data().smetric, qid: doc.data().id });\n            });\n    }\n    returnArray",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/surveys/proxy+page.server.ts",
        "start": 47,
        "end": 52,
        "startLoc": {
          "line": 47,
          "column": 15,
          "position": 537
        },
        "endLoc": {
          "line": 52,
          "column": 12,
          "position": 606
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/surveys/proxy+page.server.ts",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 15,
          "position": 423
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 492
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js'",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/surveys/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 11,
          "position": 77
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 380
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 12,
          "column": 18,
          "position": 385
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ";\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/surveys/$types.d.ts",
        "start": 17,
        "end": 22,
        "startLoc": {
          "line": 17,
          "column": 5,
          "position": 490
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 675
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 17,
        "end": 22,
        "startLoc": {
          "line": 17,
          "column": 8,
          "position": 477
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageParentData",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/surveycomplete/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 18,
          "position": 77
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 372
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 12,
          "column": 21,
          "position": 377
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = Expand<Kit.AwaitedActions<typeof import('./proxy+page.server.js').actions>> | null;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/signup/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 10,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 675
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = unknown;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/project_overview/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 20,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 657
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = Expand<Kit.AwaitedActions<typeof import('./proxy+page.server.js').actions>> | null;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/login/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 9,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 675
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "} from \"firebase/firestore\";\nimport type { PageServerLoad } from \"../login/$types\";\nimport type { user } from \"../../user\";\nimport { redirect } from \"@sveltejs/kit\";\n\nexport const load = async ({ cookies, url }: Parameters<PageServerLoad>[0]) => {\n    const cookie = cookies.get('user'",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts",
        "start": 14,
        "end": 20,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 58
        },
        "endLoc": {
          "line": 20,
          "column": 7,
          "position": 154
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/project_overview/proxy+page.server.ts",
        "start": 3,
        "end": 9,
        "startLoc": {
          "line": 3,
          "column": 2,
          "position": 30
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 126
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ".forEach(async (project) => {\n      const q3 = query(\n        surveyAnswers,\n        where(\"userid\",\"==\", user.uid),\n        where(\"projectid\",\"==\", project.id),\n        where(\"time\",\">\", weekOldTimestamp),\n      ); //if this is not empty a survey has been taken in the last seven days so DON'T generate survey for it\n      const querySnapshot3 = await getDocs(q3);\n  \n      if (querySnapshot3.empty) {\n        surveyList.push({\n            projectName: project.data().projectname,\n            projectID: project.id,\n            manager: false",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts",
        "start": 157,
        "end": 170,
        "startLoc": {
          "line": 157,
          "column": 15,
          "position": 1385
        },
        "endLoc": {
          "line": 170,
          "column": 6,
          "position": 1519
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts",
        "start": 137,
        "end": 150,
        "startLoc": {
          "line": 137,
          "column": 15,
          "position": 1217
        },
        "endLoc": {
          "line": 150,
          "column": 5,
          "position": 1351
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = unknown;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 13,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 657
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<import('../$types.js').LayoutServerData>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = Expand<Kit.AwaitedActions<typeof import('./proxy+page.server.js').actions>> | null;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type RequestEvent = Kit.RequestEvent<RouteParams, RouteId>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/add/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 7,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 675
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageParentData = EnsureDefined<import('../$types.js').LayoutData>;\n\nexport type PageServerData = null;\nexport type PageData = Expand<PageParentData>;",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/about/$types.d.ts",
        "start": 5,
        "end": 15,
        "startLoc": {
          "line": 5,
          "column": 9,
          "position": 77
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 411
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 15,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 411
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "import { dev } from '$app/environment';\nimport { app } from '../../../hooks.server';\nimport { getFirestore,collection, getDocs, query, orderBy, where, Timestamp } from 'firebase/firestore';\nimport { _getTasks } from '../../dashboard/+page.server';\nimport type { PageServerLoad } from \"../../login/$types\";\nimport type { user } from \"../../../user\";\nimport { redirect } from '@sveltejs/kit';\n\n// we don't need any JS on this page, though we'll load\n// it in dev so that we get hot module replacement\nexport const csr = dev;\n\n// since there's no dynamic data here, we can prerender\n// it so that it gets served as a static asset in production\nexport const prerender = true;\n\nexport const load:",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/projects/[slug]/+page.server.ts",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 150
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 2,
        "end": 18,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 153
        }
      }
    },
    {
      "format": "typescript",
      "lines": 219,
      "fragment": ") => {\n    const cookie = cookies.get('user');\n    if (cookie == undefined) {\n        throw redirect(302, '/login');\n    }\n\n    if (params.slug === 'all'){\n        if (cookie == null) {\n            return {\n                post : [\"All projects\",[]],\n            }\n        }\n        else{\n            const user = JSON.parse(cookie);\n\n            return { post : getAllProjects(user)};\n        }\n    }\n    if (params.slug === 'atrisk'){\n        if (cookie == null) {\n            return {\n                post : [\"Projects at risk\",[]],\n            }\n        }\n        else{\n            const user = JSON.parse(cookie);\n\n            return { post : getAtRiskProjects(user)};\n        }\n    }\n    if (params.slug === 'surveysdue'){\n        if (cookie == null) {\n            return {\n                post : [\"Projects with surveys due\",[]],\n            }\n        }\n        else{\n            const user = JSON.parse(cookie);\n\n            return { post : getProjectsWithSurveysDue(user)};\n        }\n    }\n    if (params.slug == 'tasksdue'){\n        if (cookie == null) {\n            return [\"Projects with tasks due\", []]\n        }\n        else{\n            const user = JSON.parse(cookie);\n            return { post:getProjectsWithTasksDue(user) };\n        }\n    }\n}\n\nasync function getAllProjects(user: user){\n    let returnArray : any[] = [\"All projects\"];\n    let projects : any[] = [];\n    \n    const db = getFirestore(app);\n    const projectsRef = collection(db, 'projects');\n    const q1 = query(projectsRef, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",false), orderBy(\"deadline\",\"asc\"));\n    const q2 = query(projectsRef, where(\"developerusernames\", \"array-contains\", user.username), where(\"complete\",\"==\",false), orderBy(\"deadline\",\"asc\"));\n    const q3 = query(projectsRef, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",true), orderBy(\"deadline\",\"asc\"));\n    const q4 = query(projectsRef, where(\"developerusernames\", \"array-contains\", user.username), where(\"complete\",\"==\",true), orderBy(\"deadline\",\"asc\"));\n    const querySnapshot1 = await getDocs(q1);\n    querySnapshot1.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n    });\n    const querySnapshot2 = await getDocs(q2);\n    querySnapshot2.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false})\n    });\n    const querySnapshot3 = await getDocs(q3);\n    querySnapshot3.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n    });\n    const querySnapshot4 = await getDocs(q4);\n    querySnapshot4.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false})\n    });\n    returnArray.push(projects);\n    return returnArray;\n}\n\nasync function getAtRiskProjects(user: user){\n    let returnArray : any[] = [\"Projects at risk\"];\n    let projects : any[] = [];\n\n    const db = getFirestore(app);\n    const projectsRef = collection(db, 'projects');\n    const q1 = query(projectsRef, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",false), where(\"atRisk\",\"==\",true), orderBy(\"deadline\",\"asc\"));\n    const q2 = query(projectsRef, where(\"developerusernames\", \"array-contains\", user.username), where(\"complete\",\"==\",false), where(\"atRisk\",\"==\",true), orderBy(\"deadline\",\"asc\"));\n    const querySnapshot1 = await getDocs(q1);\n    querySnapshot1.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n    });\n    const querySnapshot2 = await getDocs(q2);\n    querySnapshot2.forEach((doc) => {\n        // doc.data() is never undefined for query doc snapshots\n        projects.push({id: doc.id, projectName: doc.data().projectname, dueDate: doc.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: false})\n    });\n    returnArray.push(projects);\n    return returnArray ;\n}\n\nasync function getProjectsWithSurveysDue(user: user){\n    let returnArray : any[] = [\"Projects with surveys due\"];  \n    let projects : any[] = [];\n\n    const db = getFirestore(app);\n    const ps = collection(db, \"projects\");\n    const q6 = query(\n      ps,\n      where(\"managerusername\", \"==\", user.username),\n      where(\"complete\", \"==\", false)\n    );\n    const q7 = query(\n      ps,\n      where(\"developerusernames\", \"array-contains\", user.username),\n      where(\"complete\", \"==\", false)\n    );\n    const querySnapshot6 = await getDocs(q6);\n  \n    const surveyAnswers = collection(db,\"surveyanswers\");\n  \n    const currentTime = Timestamp.now();\n    const weekOldTimestamp = Timestamp.fromMillis(currentTime.toMillis() - 604800000);\n  \n    querySnapshot6.forEach(async (project) => {\n      const q8 = query(\n        surveyAnswers,\n        where(\"userid\",\"==\", user.uid),\n        where(\"projectid\",\"==\", project.id),\n        where(\"time\",\">\", weekOldTimestamp),\n      ); //if this is not empty a survey has been taken in the last seven days so DON'T generate survey for it\n      const querySnapshot8 = await getDocs(q8);\n  \n      if (querySnapshot8.empty) {\n        projects.push({\n            id: project.id,\n            projectName: project.data().projectname, \n            dueDate: project.data().deadline.toDate().toLocaleString(\"en-GB\",{\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            }), managerBool: true})\n        };\n    });\n\n    const querySnapshot7 = await getDocs(q7);\n\n    querySnapshot7.forEach(async (project) => {\n        const q9 = query(\n          surveyAnswers,\n          where(\"userid\",\"==\", user.uid),\n          where(\"projectid\",\"==\", project.id),\n          where(\"time\",\">\", weekOldTimestamp),\n        ); //if this is not empty a survey has been taken in the last seven days so DON'T generate survey for it\n        const querySnapshot9 = await getDocs(q9);\n    \n        if (querySnapshot9.empty) {\n          projects.push({\n              id: project.id,\n              projectName: project.data().projectname, \n              dueDate: project.data().deadline.toDate().toLocaleString(\"en-GB\",{\n              year: \"numeric\",\n              month: \"numeric\",\n              day: \"numeric\",\n              }), managerBool: true})\n          };\n      });\n    returnArray.push(projects);\n    return returnArray;\n}\n\nasync function getProjectsWithTasksDue(user: user){\n    let returnArray : any[] = [\"Projects with tasks due\"];  \n    let projects : any[] = [];\n    const taskList = await _getTasks(user);\n    for (let task of taskList) {\n        if (!projects.some(project => project.name == task.projectName)){\n            projects.push({\n                id: task.projectID,\n                projectName: task.projectName, \n                dueDate: task.projectDeadline.toLocaleDateString()\n            });\n        }\n    }\n    returnArray.push(projects);\n    return returnArray;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/projects/[slug]/+page.server.ts",
        "start": 17,
        "end": 235,
        "startLoc": {
          "line": 17,
          "column": 2,
          "position": 165
        },
        "endLoc": {
          "line": 235,
          "column": 2,
          "position": 2598
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/proxy+page.server.ts",
        "start": 18,
        "end": 236,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 173
        },
        "endLoc": {
          "line": 236,
          "column": 2,
          "position": 2606
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ";\ntype MaybeWithVoid<T> = {} extends T ? T | void : T;\nexport type RequiredKeys<T> = { [K in keyof T]-?: {} extends { [P in K]: T[K] } ? never : K; }[keyof T];\ntype OutputDataShape<T> = MaybeWithVoid<Omit<App.PageData, RequiredKeys<T>> & Partial<Pick<App.PageData, keyof T & keyof App.PageData>> & Record<string, any>>\ntype EnsureDefined<T> = T extends null | undefined ? {} : T;\ntype OptionalUnion<U extends Record<string, any>, A extends keyof U = U extends U ? keyof U : never> = U extends unknown ? { [P in Exclude<A, keyof U>]?: never } & U : never;\nexport type Snapshot<T = any> = Kit.Snapshot<T>;\ntype PageServerParentData = EnsureDefined<LayoutServerData",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 4,
          "position": 77
        },
        "endLoc": {
          "line": 12,
          "column": 17,
          "position": 378
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 5,
        "end": 12,
        "startLoc": {
          "line": 5,
          "column": 19,
          "position": 82
        },
        "endLoc": {
          "line": 12,
          "column": 7,
          "position": 383
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ">;\n\nexport type PageServerLoad<OutputData extends OutputDataShape<PageServerParentData> = OutputDataShape<PageServerParentData>> = Kit.ServerLoad<RouteParams, PageServerParentData, OutputData, RouteId>;\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\nexport type ActionData = unknown;\nexport type PageServerData = Expand<OptionalUnion<EnsureDefined<Kit.AwaitedProperties<Awaited<ReturnType<typeof import('./proxy+page.server.js').load>>>>>>;\nexport type PageData = Expand<Omit<PageParentData, keyof PageServerData> & EnsureDefined<PageServerData>>;\nexport type Action<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Action<RouteParams, OutputData, RouteId>\nexport type Actions<OutputData extends Record<string, any> | void = Record<string, any> | void> = Kit.Actions<RouteParams, OutputData, RouteId>\nexport type LayoutServerLoad",
      "tokens": 0,
      "firstFile": {
        "name": ".svelte-kit/types/src/routes/$types.d.ts",
        "start": 17,
        "end": 26,
        "startLoc": {
          "line": 17,
          "column": 2,
          "position": 489
        },
        "endLoc": {
          "line": 26,
          "column": 17,
          "position": 732
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/projects/[slug]/$types.d.ts",
        "start": 13,
        "end": 22,
        "startLoc": {
          "line": 13,
          "column": 11,
          "position": 406
        },
        "endLoc": {
          "line": 22,
          "column": 13,
          "position": 649
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "import { dev } from '$app/environment';\nimport { app } from '../../hooks.server';\nimport { getFirestore, collection, getDocs, doc, getDoc, addDoc, query, where, serverTimestamp, updateDoc, increment } from 'firebase/firestore';\nimport type { PageServerLoad, Actions } from './$types';\nimport type { user } from \"../../user\";\nimport { redirect } from \"@sveltejs/kit\";\n\n\n// we don't need any JS on this page, though we'll load\n// it in dev so that we get hot module replacement\nexport const csr = dev;\n\nexport const prerender = false;\n\nexport const load:",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/surveys/+page.server.ts",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 150
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/surveys/proxy+page.server.ts",
        "start": 2,
        "end": 16,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 16,
          "column": 2,
          "position": 153
        }
      }
    },
    {
      "format": "typescript",
      "lines": 86,
      "fragment": ") => {\n    let returnArray : any[] = [];\n    let questions : any[] = [];\n\n    const cookie = cookies.get('user');\n    if (cookie == undefined) {\n        throw redirect(302, '/login');\n    }\n    const user: user = JSON.parse(cookie);\n    const db = getFirestore(app);\n\n    const projID = url.searchParams.get(\"id\")!;\n    const project = doc(db, \"projects\", projID);\n    const projectDoc = await getDoc(project);\n    //check if user is manager or employee for the project\n    let managerUsername = projectDoc.get(\"managerusername\");\n\n    returnArray.push(projectDoc.get(\"projectname\"));\n\n    const questionsRef = collection(db, 'surveyquestions');\n\n    if (managerUsername === user.username){\n        const querySnapshot1 = await getDocs(questionsRef);\n        querySnapshot1.forEach((doc) => {\n            // doc.data() is never undefined for query doc snapshots\n            questions.push({ question: doc.data().question, metric: doc.data().smetric, qid: doc.data().id });\n        });\n    }\n    else{\n        const q = query(questionsRef, where(\"qtype\", \"==\", \"employee\"));\n        const querySnapshot2 = await getDocs(q);\n            querySnapshot2.forEach((doc) => {\n                // doc.data() is never undefined for query doc snapshots\n                questions.push({ question: doc.data().question, metric: doc.data().smetric, qid: doc.data().id });\n            });\n    }\n    returnArray.push(questions);\n    return { post: returnArray }\n    }\n\n\nexport const actions = {\n    default: async ({ cookies, request, url }) => {\n        const data = await request.formData();\n        const cookie = cookies.get('user')!;\n\n        const user = JSON.parse(cookie);\n        const answers : any[] = [];\n        const projID = url.searchParams.get(\"id\")!;\n\n        //add numAnsweredMetricName and metricNameTotal: to project document\n        //make the object first\n        let fields = {};\n\n        for (const element of data.entries()) {\n            const metricname = element[0].split(\":\")[0].toLowerCase().replace(/ /g,'_');\n            //@ts-ignore\n            fields[metricname] = Number(fields[metricname] ?? 0 + element[1]);\n            //@ts-ignore\n            fields[metricname + \"_answered\"] = fields[metricname + \"_answered\"] ?? 0 + 1;\n        }\n        console.log(\"ree: \", fields);\n        Object.keys(fields).forEach((key, index) => {\n            //@ts-ignore\n            fields[key] = increment(fields[key]);\n        });\n\n        const db = getFirestore(app);\n\n        await updateDoc(doc(db, \"projects\", projID), {smetrics: fields})\n/*         console.log(projID);\n        \n        for (const element of data.entries()) {\n            answers.push({ qid: element[0], answer: element[1]});\n        }\n        console.log(answers);\n        await addDoc(collection(db,\"surveyanswers\"), {\n            projectid : projID,\n            time: serverTimestamp(),\n            answers: answers,\n            userid: user.uid,\n            username: user.username,\n          });\n        throw redirect(303, \"/surveycomplete\"); //might change this */\n    }\n  } satisfies Actions;",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/surveys/+page.server.ts",
        "start": 15,
        "end": 100,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 165
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 988
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/surveys/proxy+page.server.ts",
        "start": 16,
        "end": 101,
        "startLoc": {
          "line": 16,
          "column": 2,
          "position": 173
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 996
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ") => {\n    cookies.delete('user');\n}\n\nexport const actions = {\n  default: async ({cookies, request}) => {\n\n        const data = await request.formData();\n        let email: string = data.get('email') as string;\n        let password: string = data.get('password') as string;\n    \n        const auth = getAuth(app);\n        try {\n            const res = await createUserWithEmailAndPassword(auth, email, password);\n            \n            let user: user = {\n              email: email ?? \"\",\n              uid: res.user.uid,\n              username: res.user.displayName ?? email.substring(0, email.indexOf('@'))\n            }\n\n            cookies.set('user', JSON.stringify(user));\n  \n            // return {\"success\": true}\n        } catch(err) {\n            console.log(\"error:\", err);\n            return {\"success\": false}\n        }\n        throw redirect(302, '/dashboard');\n  }\n} satisfies Actions;",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/signup/+page.server.ts",
        "start": 8,
        "end": 38,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 104
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 399
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/signup/proxy+page.server.ts",
        "start": 9,
        "end": 39,
        "startLoc": {
          "line": 9,
          "column": 2,
          "position": 112
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 407
        }
      }
    },
    {
      "format": "typescript",
      "lines": 113,
      "fragment": ") => {\n  const cookie = cookies.get(\"user\");\n  if (cookie == undefined) {\n    throw redirect(302, \"/login\");\n  }\n  const user: user = JSON.parse(cookie);\n\n  const db = getFirestore(app);\n\n  const projectID = url.searchParams.get(\"id\")!;\n  const project = doc(db, \"projects\", projectID);\n  const projectDoc = await getDoc(project);\n\n  const name = projectDoc.get(\"projectname\");\n  const desc = projectDoc.get(\"projectdescription\");\n  const deadline = projectDoc.get(\"deadline\").toDate();\n  const startDate = projectDoc.get(\"startdate\").toDate().toLocaleDateString();\n  const smetrics = projectDoc.get(\"smetrics\");\n  const budget = Math.round(projectDoc.get(\"budget\") * 100) / 100;\n  const codeAnalysisScore = projectDoc.get(\"codeAnalysisScore\") * 100;\n  const codeAnalysisDate = projectDoc\n    .get(\"codeAnalysisDate\")\n    .toDate()\n    .toLocaleString();\n  const managerUsername = projectDoc.get(\"managerusername\");\n\n  const aiMetrics = {};\n  let res = {\n    features: {},\n    classification: [0,0],\n    predicted_class:0\n  };\n\n  let noRisk = true\n  if(smetrics){\n    noRisk=false\n    for (let key in smetrics) {\n        if (key.endsWith(\"answered\")) {\n          const metricName = key.substring(0, key.lastIndexOf(\"_\"));\n          //@ts-ignore\n          aiMetrics[metricName] = smetrics[metricName] / smetrics[key];\n        }\n      }\n      //add code analysis and budget and num comits, non soft metrics\n      //@ts-ignore\n      aiMetrics[\"code_analysis\"] = codeAnalysisScore;\n      //@ts-ignore\n    \n      aiMetrics[\"budget\"] = budget;\n      //@ts-ignore\n    \n      aiMetrics[\"num_commits\"] = projectDoc.get(\"numCommits\");\n    \n      //query AI backend for stuff\n      const response = await fetch(\n        \"https://cs261-backend-7r5ljue3ha-no.a.run.app/classify\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({ metrics: aiMetrics }),\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n        }\n      );\n      res = await response.json();\n        console.log( 'classification (prob of risk): ', res.classification[0], 'features: ', res.features, 'predictedclass: ', res.predicted_class)\n  }\n\n  const githubLink = projectDoc.get(\"githublink\");\n  const projectType = projectDoc.get(\"projecttype\");\n  const devUsernames: string[] = [];\n  for (const developer of projectDoc.get(\"developerusernames\")) {\n    devUsernames.push(developer);\n  }\n  var progress = \"Not complete\";\n  var status = \"Not at risk\";\n  if (projectDoc.get(\"complete\")) {\n    progress = \"Complete\";\n    if (projectDoc.get(\"atRisk\")) {\n      status = \"Failure\";\n    } else {\n      status = \"Success\";\n    }\n  } else if (projectDoc.get(\"atRisk\")) {\n    status = \"At risk\";\n  }\n\n  return {\n    user: user,\n    project: {\n      name: name,\n      desc: desc,\n      deadline: deadline,\n      startDate: startDate,\n      budget: budget,\n      codeAnalysisScore: codeAnalysisScore,\n      codeAnalysisDate: codeAnalysisDate,\n      managerUsername: managerUsername,\n      githubLink: githubLink,\n      devUsernames: devUsernames,\n      progress: progress,\n      status: status,\n      projectType: projectType,\n      id: projectID,\n    },\n    features: res.features,\n    failureProbability: res.classification[0],\n    predClass: res.predicted_class,\n    noRisk: noRisk,\n    //for retraining\n    metrics: aiMetrics\n  };\n};",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/project_overview/+page.server.ts",
        "start": 7,
        "end": 119,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 101
        },
        "endLoc": {
          "line": 119,
          "column": 2,
          "position": 1107
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/project_overview/proxy+page.server.ts",
        "start": 8,
        "end": 120,
        "startLoc": {
          "line": 8,
          "column": 2,
          "position": 109
        },
        "endLoc": {
          "line": 120,
          "column": 2,
          "position": 1115
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "import type { Actions } from \"./$types\";\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { app } from \"../../hooks.server\";\nimport type { user } from \"../../user\";\nimport { doc, getDoc, getFirestore } from \"firebase/firestore\";\nimport type { PageServerLoad } from \"./$types\";\nimport { redirect } from \"@sveltejs/kit\";\n\nexport const load:",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/login/+page.server.ts",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 2,
          "position": 112
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/login/proxy+page.server.ts",
        "start": 2,
        "end": 10,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 10,
          "column": 2,
          "position": 115
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": ") => {\n    cookies.delete('user');\n}\n\nexport const actions = {\n  default: async ({ cookies, request }) => {\n    const auth = getAuth(app);\n\n    const data = await request.formData();\n    let email: string = data.get(\"email\") as string;\n    let password: string = data.get(\"password\") as string;\n\n    try {\n        const res = await signInWithEmailAndPassword(auth, email, password);\n\n        const db = getFirestore(app);\n        const userDocRef = doc(db, \"users\", res.user.uid);\n        const userDoc = await getDoc(userDocRef);\n\n        let githubToken: string = \"\";\n        //they have a github API token - add to the cookie\n        if (userDoc.exists()) {\n          githubToken = userDoc.data().githubToken;\n        }\n\n        let user: user = {\n          email: email ?? \"\",\n          uid: res.user.uid,\n          username:\n            res.user.displayName ?? email.substring(0, email.indexOf(\"@\")),\n          githubToken: githubToken,\n        };\n\n        cookies.set(\"user\", JSON.stringify(user));\n    } catch (err) {\n        return { success: false };\n    }\n    throw redirect(302, '/dashboard');\n  },\n} satisfies Actions;",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/login/+page.server.ts",
        "start": 9,
        "end": 48,
        "startLoc": {
          "line": 9,
          "column": 2,
          "position": 126
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 518
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/login/proxy+page.server.ts",
        "start": 10,
        "end": 49,
        "startLoc": {
          "line": 10,
          "column": 2,
          "position": 134
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 526
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "import { app } from \"../../hooks.server\";\nimport {\n    getFirestore,\n    collection,\n    getDocs,\n    query,\n    where,\n    getCountFromServer,\n    setDoc,\n    doc,\n    orderBy,\n    Timestamp\n} from \"firebase/firestore\";\nimport type { PageServerLoad } from \"../login/$types\";\nimport type { user } from \"../../user\";\nimport { redirect } from \"@sveltejs/kit\";\n\nexport const load:",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/dashboard/+page.server.ts",
        "start": 1,
        "end": 18,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 112
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts",
        "start": 2,
        "end": 19,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 115
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "} from \"firebase/firestore\";\nimport type { PageServerLoad } from \"../login/$types\";\nimport type { user } from \"../../user\";\nimport { redirect } from \"@sveltejs/kit\";\n\nexport const load: PageServerLoad = async ({ cookies, url }) => {\n    const cookie = cookies.get('user'",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/dashboard/+page.server.ts",
        "start": 13,
        "end": 19,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 56
        },
        "endLoc": {
          "line": 19,
          "column": 7,
          "position": 146
        }
      },
      "secondFile": {
        "name": "src/routes/project_overview/+page.server.ts",
        "start": 2,
        "end": 8,
        "startLoc": {
          "line": 2,
          "column": 2,
          "position": 28
        },
        "endLoc": {
          "line": 8,
          "column": 7,
          "position": 118
        }
      }
    },
    {
      "format": "typescript",
      "lines": 213,
      "fragment": ") => {\n    const cookie = cookies.get('user');\n    if (cookie == undefined) {\n        throw redirect(302, '/login');\n    }\n    let user: user = JSON.parse(cookie);\n\n    //this is if we have been redirected from a github authentication\n    //finish by getting the OAuth code, writing to firebase, rebuilding to user cookie, and redirecting back to the proj specific page\n    const code = url.searchParams.get(\"code\");\n    if (code != null) {\n        const state = url.searchParams.get(\"state\")!;\n\n        const response = await fetch(\n            \"https://github.com/login/oauth/access_token?\" +\n                new URLSearchParams({\n                    client_id: \"741e0c0a106d7fdd57f2\",\n                    client_secret: \"cb05b030aaf0e4b7e6270744ef5b16b477107d46\",\n                    code: code,\n                }),\n            {\n                method: \"POST\",\n                headers: {\n                    Accept: \"application/json\",\n                },\n            }\n        );\n\n        const tokenObj = await response.json();\n        const token = tokenObj.access_token;\n\n        user.githubToken = token;\n        cookies.set(\"user\", JSON.stringify(user));\n\n        const db = getFirestore(app);\n        await setDoc(doc(db, \"users\", user.uid), {\n            githubToken: token,\n        });\n        console.log(\"here! \", state);\n        throw redirect(303, \"/project_overview?id=\" + state);\n    }\n\n    const db = getFirestore(app);\n    const projects = collection(db, \"projects\");\n\n    const q1 = query(\n        projects,\n        where(\"managerusername\", \"==\", user.username), \n        where(\"complete\", \"==\", false)\n    );\n    const querySnapshot1 = await getCountFromServer(q1);\n    const totalManaging = querySnapshot1.data().count;\n\n    const q2 = query(\n        projects,\n        where(\"developerusernames\", \"array-contains\", user.username), \n        where(\"complete\", \"==\", false)\n    );\n    const querySnapshot2 = await getCountFromServer(q2);\n    const totalNotManaging = querySnapshot2.data().count;\n\n    const totalProjects = totalManaging + totalNotManaging;\n\n    const surveys = await getSurveys(user);\n    const tasks = await _getTasks(user);\n    const atRisk = await getAtRisk(user);\n    \n    return {\n        atRisk: atRisk,\n        notAtRisk: totalManaging - atRisk,\n        withSurveys: surveys.length,\n        withoutSurveys: totalProjects - surveys.length,\n        withTasks: tasks.length,\n        withoutTasks: totalProjects - tasks.length,\n        surveyList: surveys,\n        taskList: tasks,\n        deadlineList: await getDeadlines(user),\n        totalProjects: totalProjects\n    };\n};\n\nasync function getAtRisk(user: user){\n    let atRiskList: any[] = [];\n    const db = getFirestore(app);\n    const projects = collection(db, \"projects\");\n    const q1 = query(\n        projects,\n        where(\"managerusername\", \"==\", user.username),\n        where(\"atRisk\", \"==\", true),\n        where(\"complete\", \"==\", false)\n    );\n    const querySnapshot1 = await getCountFromServer(q1);\n    const atRisk = querySnapshot1.data().count;\n    return atRisk\n}\n\nasync function getSurveys(user : user) {\n    let surveyList: any[] = [];\n  \n    const db = getFirestore(app);\n    const ps = collection(db, \"projects\");\n    const q1 = query(\n      ps,\n      where(\"managerusername\", \"==\", user.username),\n      where(\"complete\", \"==\", false)\n    );\n    const q2 = query(\n      ps,\n      where(\"developerusernames\", \"array-contains\", user.username),\n      where(\"complete\", \"==\", false)\n    );\n    const querySnapshot1 = await getDocs(q1);\n  \n    const surveyAnswers = collection(db,\"surveyanswers\");\n  \n    const currentTime = Timestamp.now();\n    const weekOldTimestamp = Timestamp.fromMillis(currentTime.toMillis() - 604800000);\n  \n    querySnapshot1.forEach(async (project) => {\n      const q3 = query(\n        surveyAnswers,\n        where(\"userid\",\"==\", user.uid),\n        where(\"projectid\",\"==\", project.id),\n        where(\"time\",\">\", weekOldTimestamp),\n      ); //if this is not empty a survey has been taken in the last seven days so DON'T generate survey for it\n      const querySnapshot3 = await getDocs(q3);\n  \n      if (querySnapshot3.empty) {\n        surveyList.push({\n          projectName: project.data().projectname,\n          projectID: project.id,\n          manager: true\n        })\n      }\n    });\n  \n    const querySnapshot2 = await getDocs(q2);\n\n    querySnapshot2.forEach(async (project) => {\n      const q3 = query(\n        surveyAnswers,\n        where(\"userid\",\"==\", user.uid),\n        where(\"projectid\",\"==\", project.id),\n        where(\"time\",\">\", weekOldTimestamp),\n      ); //if this is not empty a survey has been taken in the last seven days so DON'T generate survey for it\n      const querySnapshot3 = await getDocs(q3);\n  \n      if (querySnapshot3.empty) {\n        surveyList.push({\n            projectName: project.data().projectname,\n            projectID: project.id,\n            manager: false\n        })\n      }\n    });\n    return surveyList;\n  }\n\nexport async function _getTasks(user:user) {\n    let taskList: any[] = [await getAnalysisTasks(user)];\n    return taskList.flat(1);\n}\n\nasync function getAnalysisTasks(user: user) {\n    let analysisTaskList: any[] = [];\n    const db = getFirestore(app);\n    const ps = collection(db, \"projects\");\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate()-7);\n    const q = query(ps, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",false), where(\"codeAnalysisDate\", \"<\", cutoff), orderBy(\"codeAnalysisDate\"));\n    const querySnapshot = await getDocs(q);\n    const currentTime = new Date().valueOf();\n    querySnapshot.forEach((project) => {\n        const analysisAge = Math.round((currentTime - project.data().codeAnalysisDate.toDate())/86400000)\n        analysisTaskList.push({\n            projectID: project.id,\n            projectName: project.data().projectname,\n            title: \"Run code analysis for \"+project.data().projectname,\n            text: analysisAge+\" days since last analysis\",\n            projectDeadline: project.data().deadline.toDate()\n        });\n    });\n    return analysisTaskList;\n}\n\nasync function getDeadlines(user: user) {\n    let deadlineList: any[] = [];\n    const db = getFirestore(app);\n    const ps = collection(db, \"projects\");\n    const q1 = query(ps, where(\"managerusername\", \"==\", user.username), where(\"complete\",\"==\",false), orderBy(\"deadline\"));\n    const q2 = query(ps, \n        where(\"developerusernames\", \"array-contains\", user.username), \n        where(\"complete\",\"==\",false), \n        where(\"deadline\",\"<\",new Date()), \n        orderBy(\"deadline\"));\n    const querySnapshot1 = await getDocs(q2);\n    querySnapshot1.forEach((project) => {\n        deadlineList.push({\n            projectID: project.id,\n            projectName: project.data().projectname,\n            deadline: project.data().deadline.toDate(),\n        });\n    });\n    const querySnapshot2 = await getDocs(q1);\n    querySnapshot2.forEach((project) => {\n        deadlineList.push({\n            projectID: project.id,\n            projectName: project.data().projectname,\n            deadline: project.data().deadline.toDate(),\n        });\n    });\n    return deadlineList;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/dashboard/+page.server.ts",
        "start": 18,
        "end": 230,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 129
        },
        "endLoc": {
          "line": 230,
          "column": 2,
          "position": 2236
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/dashboard/proxy+page.server.ts",
        "start": 19,
        "end": 231,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 137
        },
        "endLoc": {
          "line": 231,
          "column": 2,
          "position": 2244
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ") => {\n  const cookie = cookies.get('user');\n  if (cookie == undefined) {\n      throw redirect(302, '/login');\n  }\n}\n \nexport const actions = {\n  default: async ({request}) => {\n    const data = await request.formData();\n    console.log(\"data \", data)\n  }\n} satisfies Actions;",
      "tokens": 0,
      "firstFile": {
        "name": "src/routes/add/+page.server.ts",
        "start": 4,
        "end": 16,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 52
        },
        "endLoc": {
          "line": 16,
          "column": 2,
          "position": 166
        }
      },
      "secondFile": {
        "name": ".svelte-kit/types/src/routes/add/proxy+page.server.ts",
        "start": 5,
        "end": 17,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 60
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 174
        }
      }
    },
    {
      "format": "css",
      "lines": 48,
      "fragment": "{\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n.container",
      "tokens": 0,
      "firstFile": {
        "name": "src/output.css",
        "start": 469,
        "end": 516,
        "startLoc": {
          "line": 469,
          "column": 2,
          "position": 1383
        },
        "endLoc": {
          "line": 516,
          "column": 11,
          "position": 1696
        }
      },
      "secondFile": {
        "name": "src/output.css",
        "start": 422,
        "end": 469,
        "startLoc": {
          "line": 422,
          "column": 2,
          "position": 1068
        },
        "endLoc": {
          "line": 469,
          "column": 11,
          "position": 1381
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ", async () => {\n  const { component } = render(OverviewsBox, { data: [{\n    atRisk: 1,\n    notAtRisk: 2,\n    withSurveys: 3,\n    withoutSurveys: 4,\n    withTasks: 5,\n    withoutTasks: 6,\n  }] }); \n  \n  expect(screen",
      "tokens": 0,
      "firstFile": {
        "name": "jest/OverviewsBox.test.js",
        "start": 28,
        "end": 38,
        "startLoc": {
          "line": 28,
          "column": 28,
          "position": 227
        },
        "endLoc": {
          "line": 38,
          "column": 7,
          "position": 318
        }
      },
      "secondFile": {
        "name": "jest/OverviewsBox.test.js",
        "start": 15,
        "end": 25,
        "startLoc": {
          "line": 15,
          "column": 20,
          "position": 120
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 209
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ", async () => {\n  const { component } = render(OverviewsBox, { data: [{\n    atRisk: 1,\n    notAtRisk: 2,\n    withSurveys: 3,\n    withoutSurveys: 4,\n    withTasks: 5,\n    withoutTasks: 6,\n  }] }); \n\n  expect(screen.getByText(\"error\"",
      "tokens": 0,
      "firstFile": {
        "name": "jest/OverviewsBox.test.js",
        "start": 49,
        "end": 59,
        "startLoc": {
          "line": 49,
          "column": 26,
          "position": 391
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 485
        }
      },
      "secondFile": {
        "name": "jest/OverviewsBox.test.js",
        "start": 15,
        "end": 38,
        "startLoc": {
          "line": 15,
          "column": 20,
          "position": 120
        },
        "endLoc": {
          "line": 38,
          "column": 11,
          "position": 322
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ";\nimport { compile } from \"svelte/compiler\";\n\nfunction svelte(strings) {\n    return eval(\n      compile(\n        strings.join(\"\"),\n        { format: \"cjs\", dev: true, accessors: true }\n      ).js.code\n    );\n  };\n\ntest(\"exports deadline list\"",
      "tokens": 0,
      "firstFile": {
        "name": "jest/DeadlinesBox.test.js",
        "start": 3,
        "end": 15,
        "startLoc": {
          "line": 3,
          "column": 46,
          "position": 35
        },
        "endLoc": {
          "line": 15,
          "column": 24,
          "position": 119
        }
      },
      "secondFile": {
        "name": "jest/OverviewsBox.test.js",
        "start": 3,
        "end": 15,
        "startLoc": {
          "line": 3,
          "column": 46,
          "position": 35
        },
        "endLoc": {
          "line": 15,
          "column": 20,
          "position": 119
        }
      }
    }
  ]
}